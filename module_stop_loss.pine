// settings
stopEnabled = input(title="Strategy: Stopp Loss?", type=input.bool, defval=false)
stopLossPercentage = input(title="Strategy: SL % drawback", type=input.integer, defval=80) / 100

takeProfitEnabled = input(title="Strategy: Take Profit?", type=input.bool, defval=false)
takeProfitLossPercentage = input(title="Strategy: TP %", type=input.integer, defval=140) / 100

activelyShort = input(title="Strategy: actively Short?", type=input.bool, defval=false)

stopEnabledShort = input(title="Strategy: Stopp Loss Shorts?", type=input.bool, defval=false)
stopLossPercentageShort = input(title="Strategy: SL short % rise", type=input.integer, defval=120) / 100

takeProfitStopEnabledShort = input(title="Strategy: Take Profit Shorts?", type=input.bool, defval=false)
takeProfitStopLossPercentageShort = input(title="Strategy: TP short %", type=input.integer, defval=60) / 100

// take profits
takeProfit = takeProfitEnabled ? float(src * takeProfitStopEnabledShort) : na
takeProfitShort = takeProfitStopEnabledShort ? float(src * takeProfitStopLossPercentageShort) : na

// stops
drawbackStop = stopEnabled ? float(src * stopLossPercentage) : na
shortStop = stopEnabledShort ? float(src * stopLossPercentageShort) : na

// order
if longCondition
    strategy.exit("Stop Loss","long", stop=drawbackStop)

if (shortCondition and activelyShort)
    strategy.exit("Cover Short","short", stop=shortStop, limit=takeProfit)