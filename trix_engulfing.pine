//@version=4
// Copyright (c) 2020-present, @Mojomajor
// TRIX script may be freely distributed under the MIT license.
//study("TRIX")
strategy("TRIX engulfing Strategy",calc_on_every_tick=true, default_qty_type=strategy.percent_of_equity, pyramiding=0, default_qty_value=50, initial_capital=5000, currency='EUR', slippage=1, commission_type=strategy.commission.percent, commission_value=0.05)
//strategy.risk.max_drawdown(10, strategy.percent_of_equity)
length = input(title="Length", type=input.integer, defval=14)
mult = input(title="TRIX Value Multiplier", type=input.integer, defval=1)
signalType = input(title="Signal Smoothing Type", defval="SMA", options=["EMA", "SMA"])
signalLength = input(title="Signal Smoothing Length", type=input.integer, defval=9)
src = input(title="Source", type=input.source, defval=close)
showSignal = input(title="Show Signal Line ?", type=input.bool, defval=true)
showHistogram = input(title="Show Histogram ?", type=input.bool, defval=false)
highlightCrossovers = input(title="Highlight TRIX/Signal Crossovers ?", type=input.bool, defval=true)
highlightZeroCrossovers = input(title="Highlight Zero Line Crossovers ?", type=input.bool, defval=true)
applyFilling = input(title="Apply Ribbon Filling ?", type=input.bool, defval=false)

triple = ema(ema(ema(src, length), length), length)

trix = mult * roc(triple, 1)
sma_1 = sma(trix, signalLength)
ema_1 = ema(trix, signalLength)
signal = signalType == "SMA" ? sma_1 : ema_1

hist = trix - signal
histColor = hist >= 0 ? hist[1] < hist ? #26A69A : #B2DFDB : 
   hist[1] < hist ? #FFCDD2 : #EF5350
plot(showHistogram ? hist : na, title="Histogram", style=plot.style_columns, color=histColor, transp=0)
hline(0, title="Zero Level", linestyle=hline.style_dotted)

trendColor = trix > signal ? #0ebb23 : color.red

trixColor = applyFilling ? trendColor : trix > 0 ? #0ebb23 : color.red
signalColor = applyFilling ? trendColor : #ff9800

trixPlot = plot(trix, title="TRIX", linewidth=2, color=trixColor, transp=0)
signalPlot = plot(showSignal ? signal : na, title="Signal", color=signalColor, transp=0)

transparent = color.new(color.white, 100)

fillColor = applyFilling ? trendColor : transparent
fill(trixPlot, signalPlot, color=fillColor, transp=70)

zeroCrossBgColor = highlightZeroCrossovers ? trix > 0 ? color.green : color.red : transparent
bgcolor(zeroCrossBgColor, transp=90)



longCondition_t = highlightCrossovers and crossover(trix, signal)
shortCondition_t = highlightCrossovers and crossunder(trix, signal)


// long positions
plotshape(longCondition_t ? trix : na, title="Crossover", location=location.absolute, style=shape.circle, size=size.tiny, color=color.green, transp=0)

// short positions
plotshape(shortCondition_t ? trix : na, title="Crossunder", location=location.absolute, style=shape.circle, size=size.tiny, color=color.red, transp=0)

sma200 = sma(src, 200)

// Get user input
rsiSource = input(title="RSI Source", type=input.source, defval=close)
rsiLength = input(title="RSI Length", type=input.integer, defval=14)
rsiOverbought = input(title="RSI Overbought Level", type=input.integer, defval=70)
rsiOversold = input(title="RSI Oversold Level", type=input.integer, defval=30)

// Get RSI value
rsiValue = rsi(rsiSource, rsiLength)
rsiOB = rsiValue >= rsiOverbought
rsiOS = rsiValue <= rsiOversold

// Identify engulfing candles
bullishEC = close > open[1] and close[1] < open[1]
bearishEC = close < open[1] and close[1] > open[1]
tradeSignal = ((rsiOS or rsiOS[1]) and bullishEC) or ((rsiOB or rsiOB[1]) and bearishEC)


longCondition  = tradeSignal and bullishEC and (strategy.position_size <= 0)
shortCondition = tradeSignal and bearishEC and (strategy.position_size >= 1)




// strategy inputs
longTrix = input(title="long: trix/eng.candle", type=input.bool, defval=false) // false for VIX (110%/1h) (106%/45m) (126%/2h) 
shortTrix = input(title="short: trix/eng.candle", type=input.bool, defval=true) // true for VIX // longer time -> smaller drawdown!

if (longCondition and not longTrix) // Engulfing
    strategy.entry("long", strategy.long, comment="EC")

if (longCondition_t and src < sma200 and longTrix) // trix
    strategy.entry("long", strategy.long, when=strategy.position_size <= 0, comment="TX")

if (shortCondition and  not shortTrix) // Engulfing
    strategy.close("long",true, comment="EC")
if (shortCondition_t and src > sma200 and shortTrix) // trix
    strategy.close("long", true, comment="TX")
