//@version=4
// Copyright (c) 2020-present, @Mojomajor
// This script may be freely distributed if you wanna die slowly and painfully. You'be been warned!

strategy("TRIVIX Strategy",calc_on_every_tick=true, default_qty_type=strategy.percent_of_equity, pyramiding=0, default_qty_value=50, initial_capital=5000, currency='EUR', slippage=1, commission_type=strategy.commission.percent, commission_value=0.05)
//strategy.risk.max_drawdown(10, strategy.percent_of_equity)


//                      INPUTS
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

length = input(title="Length", type=input.integer, defval=14)
mult = input(title="TRIX Value Multiplier", type=input.integer, defval=1)
signalType = input(title="Signal Smoothing Type", defval="SMA", options=["EMA", "SMA"])
signalLength = input(title="Signal Smoothing Length", type=input.integer, defval=9)
src = input(title="Source", type=input.source, defval=close)
showSignal = input(title="Show Signal Line ?", type=input.bool, defval=true)
showHistogram = input(title="Show Histogram ?", type=input.bool, defval=false)
highlightCrossovers = input(title="Highlight TRIX/Signal Crossovers ?", type=input.bool, defval=true)
highlightZeroCrossovers = input(title="Highlight Zero Line Crossovers ?", type=input.bool, defval=true)
applyFilling = input(title="Apply Ribbon Filling ?", type=input.bool, defval=false)

// strategy stuff
baselineSMAlength = input(title="Strategy: SMA", type=input.integer, defval=200) // 180 seems good in H2
activelyShort = input(title="Strategy: actively Short?", type=input.bool, defval=false)

//                      BACKTESTING
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░


enableBacktest = input(title="Enable Backtest?", type=input.bool, defval=false)

testStartYear = input(defval=2018, title="Backtest Start Year",type=input.integer)
testStartMonth = input(defval=1, title="Backtest Start Month",type=input.integer)
testStartDay = input(defval=1, title="Backtest Start Day",type=input.integer)
testPeriodStart = timestamp(testStartYear,testStartMonth,testStartDay,23,0)

testStopYear = input(defval=2019, title="Backtest Stop Year",type=input.integer)
testStopMonth = input(defval=1, title="Backtest Stop Month",type=input.integer)
testStopDay = input(defval=1, title="Backtest Stop Day",type=input.integer)
testPeriodStop = timestamp(testStopYear,testStopMonth,testStopDay,0,0)

// A switch to control background coloring of the test period
testPeriodBackground = input(title="Color Background?", type=input.bool, defval=true)
testPeriodBackgroundColor = testPeriodBackground and (time >= testPeriodStart) and (time <= testPeriodStop) ? #00FF00 : na
bgcolor(testPeriodBackgroundColor, transp=97)

canTrade() =>
    doBackTest = iff(time >= testPeriodStart and time <= testPeriodStop , true, false)
    enableBacktest ? doBackTest : true

//                      CALCULATION
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░


triple = ema(ema(ema(src, length), length), length)

trix = mult * roc(triple, 1)
sma_1 = sma(trix, signalLength)
ema_1 = ema(trix, signalLength)
signal = signalType == "SMA" ? sma_1 : ema_1

hist = trix - signal
histColor = hist >= 0 ? hist[1] < hist ? #26A69A : #B2DFDB : 
   hist[1] < hist ? #FFCDD2 : #EF5350
plot(showHistogram ? hist : na, title="Histogram", style=plot.style_columns, color=histColor, transp=0)
hline(0, title="Zero Level", linestyle=hline.style_dotted)

trendColor = trix > signal ? #0ebb23 : color.red

trixColor = applyFilling ? trendColor : trix > 0 ? #0ebb23 : color.red
signalColor = applyFilling ? trendColor : #ff9800

trixPlot = plot(trix, title="TRIX", linewidth=2, color=trixColor, transp=0)
signalPlot = plot(showSignal ? signal : na, title="Signal", color=signalColor, transp=0)

transparent = color.new(color.white, 100)

fillColor = applyFilling ? trendColor : transparent
fill(trixPlot, signalPlot, color=fillColor, transp=70)

zeroCrossBgColor = highlightZeroCrossovers ? trix > 0 ? color.green : color.red : transparent
bgcolor(zeroCrossBgColor, transp=90)

sma200 = sma(src, baselineSMAlength)


//                      ORDERS
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░


longCondition = highlightCrossovers and crossover(trix, signal) and src < sma200 and strategy.position_size <= 0 and canTrade()
shortCondition = highlightCrossovers and crossunder(trix, signal) and src > sma200 and strategy.position_size >= 1 and canTrade()


// entry plots
plotshape(longCondition ? trix : na, title="Crossover", location=location.absolute, style=shape.circle, size=size.tiny, color=color.green, transp=0)
plotshape(shortCondition ? trix : na, title="Crossunder", location=location.absolute, style=shape.circle, size=size.tiny, color=color.red, transp=0)


if longCondition
    strategy.entry("long", strategy.long, when=strategy.position_size <= 0)

if (shortCondition and not activelyShort)
    strategy.close("long", true)

if (shortCondition and activelyShort)
    strategy.entry("short", strategy.short)